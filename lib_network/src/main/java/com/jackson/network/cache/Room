@ColumnInfo 指定该字段在表中的列的名字 -->修饰在实体类字段上
        用法：
            @Entity(tableName = "cache")
            public class Cache implements Serializable {

                @ColumnInfo(name = "_data", typeAffinity = ColumnInfo.UNDEFINED, index = true, collate = ColumnInfo.UNDEFINED)
                public int age;
            }
        释义：
            name = "_data"：指定该字段在数据库中的列名
            typeAffinity = ColumnInfo.UNDEFINED：
            index = true：为该字段创建索引
            collate = ColumnInfo.UNDEFINED：排序方式

@Dao 操作数据库的类，需要abstract或interface修饰 -->修饰在类上
        用法：
            @Dao
            public interface CacheDao {
            }
@Database 说明此类是数据库 -->修饰在类上
        用法：
            @Database(entities = {Cache.class}, version = 1,exportSchema = true)
            public abstract class CacheDatabase extends RoomDatabase {

                private static final CacheDatabase database;

                static {
                    //创建一个内存数据库
                    //但是这种数据库的数据只存在于内存中，也就是说，进程被杀之后，数据随之丢失
            //        Room.inMemoryDatabaseBuilder();
                    database = Room.databaseBuilder(AppGlobals.getApplication(), CacheDatabase.class, "ppjoke_cache")
                            //允许在主线程进行查询，默认为false
                            .allowMainThreadQueries()
                            //数据库创建和打开后的回调
            //                .addCallback()
                            //设置查询的线程池
            //                .setQueryExecutor()
            //                .openHelperFactory()
                            //room的日志模式
            //                .setJournalMode()
                            //数据库升级异常之后的回滚，会删除所有数据，并重建数据库
            //                .fallbackToDestructiveMigration()
                            //数据库升级异常之后根据指定版本进行回滚
            //                .fallbackToDestructiveMigrationFrom()
            //                .addMigrations(CacheDatabase.mMigration)
                            .build();

                }

                public static CacheDatabase getDatabase() {
                    return database;
                }

                static Migration mMigration = new Migration(1, 3) {
                    @Override
                    public void migrate(@NonNull SupportSQLiteDatabase database) {
                        database.execSQL("alter table teacher rename to teacher1");
                        database.execSQL("alter table teacher add column teagher_age INTEGER not null default 0");
                    }
                };

            }

        释义：entities = {Cache.class}：数据库名称
              version = 1：数据库版本号
              exportSchema = true：会导出一份json文件，文件中包含了数据库在升级、创建表时所作的一些操作

@Insert 插入动作 -->修饰在方法上
       用法：
           @Dao
           public interface CacheDao {
               @Insert(onConflict = OnConflictStrategy.REPLACE)
               int insert(Cache cache);
           }

       释义：@Insert(onConflict = OnConflictStrategy.REPLACE) 插入数据发生冲时的策略
                                  REPLACE：替换老数据
                                  ROLLBACK：回滚为老数据
                                  ABORT：终止提交新数据
                                  Fail：失败
                                  IGNORE：忽略本次冲突

@Update 更新动作 -->修饰在方法上
       用法：
           @Dao
           public interface CacheDao {
               @Insert(onConflict = OnConflictStrategy.REPLACE)
               int insert(Cache cache);
           }

       释义：@Insert(onConflict = OnConflictStrategy.REPLACE) 插入数据发生冲时的策略
                                  REPLACE：替换老数据
                                  ROLLBACK：回滚为老数据
                                  ABORT：终止提交新数据
                                  Fail：失败
                                  IGNORE：忽略本次冲突


@Query 查询操作 -->修饰在方法上
       用法:
           @Dao
           public interface CacheDao {
               @Query("SELECT last_name, name FROM user WHERE uid = :userId LIMIT 1")
               public abstract UserName findOneUserName(int userId);
           }


@RawQuery 查询操作 -->修饰在方法上
       用法:
           @Dao
           public interface CacheDao {
               @RawQuery(observedEntities = User.class)
               LiveData<List<User>> getUsers(String query);
           }
           //使用方式：
           LiveData<List<User>> liveUsers = rawDao.getUsers("select * from User ORDER BY name DESC")

       释义：需要在使用的时候动态传入查询语句


@Delete 删除动作 -->修饰在方法上
       用法：
           @Dao
           public interface CacheDao {

               @Delete
               int delete(Cache cache);
           }

@Embedded 嵌套对象，example：Cache表中有个User对象，希望User对象的所有字段出现在此表中 -->修饰在实体类字段上
       用法：
           @Entity(tableName = "cache")
           public class Cache implements Serializable {

               @Embedded
               public User user;
           }

@Entity(tableName = "cache") 将实体类映射成数据库表
       用法：
            @Entity(tableName = "cache"
                    , ignoredColumns = {"data"}
                    , inheritSuperIndices = false
            )
            public class Cache implements Serializable {
            }

       释义：tableName = "cache" ：表名
             ignoredColumns = {"data"}：本表中 那些字段 不需要 映射到表中
             inheritSuperIndices = false：如果 该值为true,那么父类中标记的indices{}索引也会算作该表的索引

@Ignore 忽略此字段，room数据库在运行时不会将此字段设置成表中的列名 -->修饰在实体类字段上
        用法：
            @Entity(tableName = "cache")
            public class Cache implements Serializable {
                @Ignore
                public String key;
            }

@Index 表索引，可以加快查询操作，用于大量数据的查询优化，但是会减慢insert和update的操作 -->修饰在类上
        用法：
            //通过 indices 来接收
            @Entity(tableName = "cache"
                    , indices = {@Index(value = {"key"}, name = "", unique = false)}
            )
            public class Cache implements Serializable {
            }

        释义：value = {"key"}：复合主键的列的名称
              unique = false：保证数据表的某个或者某些字段只有唯一的记录 有时候需要保证数据表的某个或者某些字段只有唯一的记录，可以通过设置@Index注解的unique属性实现。以下实例代码实现了避免有两条记录包含一样的key值。

@PrimaryKeys 主键约束 -->修饰在实体类字段上
       用法：@PrimaryKey(autoGenerate = false)
           @Entity(tableName = "cache")
           public class Cache implements Serializable {

               @PrimaryKey //需要自己输入唯一数据
               public String key;

               @PrimaryKey(autoGenerate = true)//数据库自动生成
               public long id;
           }

       释义：autoGenerate 是否自动生成主键

@ForeignKey 外键,一般用于多表数据查询.可以配置多个外键
       用法：@Entity(tableName = "cache",
              foreignKeys = {@ForeignKey(entity = User.class, parentColumns = "id", childColumns = "key",
                              onDelete = ForeignKey.RESTRICT, onUpdate = ForeignKey.SET_NULL, deferred = false),
                              @ForeignKey(entity = Student.class, parentColumns = {"id"}, childColumns = {"key"},
                                      onDelete = ForeignKey.RESTRICT, onUpdate = ForeignKey.SET_NULL, deferred = false)}
                   )
              public class Cache implements Serializable {
              }

       释义：foreignKeys：外键,一般用于多表数据查询.可以配置多个外键
             entity = User.class：与之关联的表的名称
             parentColumns = "id"：与之关联的表的列名
             childColumns = "key"：但钱表中列名,必须要和parentColumns个数一致。这两个可以理解为根据cache表中的那个字段去比对ForeignTable表中的那个字段，认为是有关联关系的数据。
             onDelete = ForeignKey.RESTRICT：关联表中某条记录被delete或update时,本表应该怎么做：
                                               NO_ACTION:什么也不做,
                                               RESTRICT:本表跟parentColumns有关系的数据会立刻删除或更新,但不允许一对多的关系,
                                               SET_NULL:本表所跟parentColumns有关系的数据被设置为null值，
                                               SET_DEFAULT:本表所有跟parentColumns有关系的数据被设置为默认值,也是null值
                                               CASCADE:本表所有跟parentColumns有关系的数据一同被删除或更新
             onUpdate = ForeignKey.SET_NULL：本表中某条记录被更新时,与之关联的表应该怎么做
             deferred = false：本表某条记录变更时，与之关联表的数据变更是否要立即执行,还是等待本表事务处理完再来处理关联表。默认是同时处理。

@Relation 关联查询，在查询数据时将带有此注解的对象所对应的表查询出来 -->修饰在方法上
       用法：
       @Entity(tableName = "cache")
       public class Cache implements Serializable {

           @Relation(entity = User.class,parentColumn = "cache_id",entityColumn = "user_id",projection = {"age","name"})
           public User user;
       }
       释义：
           entity：user对象所对应的表
           parentColumn：当前表的列名
           entityColumn：标有此注解的表的列名
           projection：需要查询的字段

           此注解通过parentColumn、entityColumn将两个表中的字段相关联

@SkipQueryVerification 编译时跳过sql语句验证

@Transaction 事务 -->修饰在字段上
       用法：
           @Entity
           class ProductWithReviews extends Product {
               @Relation(parentColumn = "id", entityColumn = "productId", entity = Review.class)
               public List&lt;Review> reviews;
           }
           @Dao
           public interface ProductDao {
               @Transaction
               @Query("SELECT * from products")
               public List<ProductWithReviews> loadAll();
           }

       释义：被标记此注解的方法需要被当作事务来提交

@TypeConvert 类型转换 Marks a method as a type converter. A class can have as many @TypeConverter methods as it needs
                       -->修饰在方法上
       用法：
           例如在数据库中存入日期字段时可以用此注解
           //新编写一个DateConvert类
           public class DateConvert {

               @TypeConverter
               public static Long date2Long(Date date){
                   return date.getTime();
               }

               @TypeConverter
               public static Date long2Date(Long leng){
                   return new Date(leng);
               }

           }
           //使用方式
           @Entity
           class ProductWithReviews extends Product {
               @TypeConverters({DateConvert.class})//存入数据库时，将调用date2Long()方法将Date转为字符串，读取时将调用long2Date()方法将字符串转为Date
               public Date date;
           }

       释义：将方法标记为类型转换器。一个类可以根据需要使用任意多个@TypeConverter方法
             每个转换器方法应接收1个参数并具有非无效返回类型（non void type）

@TypeConverts 与@TypeConvert一起使用 -->修饰在方法、参数、字段、类上
       释义：If you put it on a {@link Database}, all Daos and Entities in that database will be able to use it.
             If you put it on a {@link Dao}, all methods in the Dao will be able to use it.
             If you put it on an {@link Entity}, all fields of the Entity will be able to use it.
             If you put it on a POJO, all fields of the POJO will be able to use it.
             If you put it on an {@link Entity} field, only that field will be able to use it.
             If you put it on a {@link Dao} method, all parameters of the method will be able to use it.
             If you put it on a {@link Dao} method parameter, just that field will be able to use it.


